{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tower Of Hanoi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Move disk 1 from rod A to rod C\n",
      "Move disk 2 from rod A to rod B\n",
      "Move disk 1 from rod C to rod B\n",
      "Move disk 3 from rod A to rod C\n",
      "Move disk 1 from rod B to rod A\n",
      "Move disk 2 from rod B to rod C\n",
      "Move disk 1 from rod A to rod C\n"
     ]
    }
   ],
   "source": [
    "# Recursive Python function to solve tower of hanoi\n",
    "def TowerOfHanoi(n, from_rod, to_rod, aux_rod):\n",
    "    if n == 0:\n",
    "        return\n",
    "    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod)\n",
    "    print(\"Move disk\", n, \"from rod\", from_rod, \"to rod\", to_rod)\n",
    "    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod)\n",
    "\n",
    "# Driver code\n",
    "N = 3\n",
    "\n",
    "# A, C, B are the name of rods\n",
    "TowerOfHanoi(N, 'A', 'C', 'B')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tic-Tac-Toe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- | - | -\n",
      "- | - | -\n",
      "- | - | -\n",
      "\n",
      "X | - | -\n",
      "- | - | -\n",
      "- | - | -\n",
      "\n",
      "X | - | -\n",
      "- | O | -\n",
      "- | - | -\n",
      "\n",
      "X | X | -\n",
      "- | O | -\n",
      "- | - | -\n",
      "\n",
      "X | X | O\n",
      "- | O | -\n",
      "- | - | -\n",
      "\n",
      "X | X | O\n",
      "- | O | -\n",
      "X | - | -\n",
      "\n",
      "X | X | O\n",
      "O | O | -\n",
      "X | - | -\n",
      "\n",
      "X | X | O\n",
      "O | O | -\n",
      "X | - | X\n",
      "\n",
      "X | X | O\n",
      "O | O | O\n",
      "X | - | X\n",
      "\n",
      "O wins!\n"
     ]
    }
   ],
   "source": [
    "b = [\"-\" for _ in range(9)]\n",
    "\n",
    "def p():\n",
    "    for i in range(0, 9, 3):\n",
    "        print(\" | \".join(b[i:i+3]))\n",
    "    print()\n",
    "\n",
    "def t(player):\n",
    "    i = int(input(f\"{player}'s turn. Choose a position from 1-9: \")) - 1\n",
    "    while b[i] != \"-\": i = int(input(\"Position already taken. Choose a different position: \")) - 1\n",
    "    b[i] = player\n",
    "    p()\n",
    "\n",
    "def c():\n",
    "    w = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]\n",
    "    return \"win\" if any(b[c[0]] == b[c[1]] == b[c[2]] != \"-\" for c in w) else \"tie\" if \"-\" not in b else \"play\"\n",
    "\n",
    "def g():\n",
    "    p()\n",
    "    current_player = \"X\"\n",
    "    while True:\n",
    "        t(current_player)\n",
    "        result = c()\n",
    "        if result in [\"win\", \"tie\"]:\n",
    "            print(f\"{current_player} wins!\" if result == \"win\" else \"It's a tie!\")\n",
    "            break\n",
    "        current_player = \"O\" if current_player == \"X\" else \"X\"\n",
    "\n",
    "g()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# BFS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BFS Traversal (starting from vertex 2):\n",
      "2 0 3 1 "
     ]
    }
   ],
   "source": [
    "from collections import defaultdict\n",
    "\n",
    "class Graph:\n",
    "    def __init__(self):\n",
    "        self.graph = defaultdict(list)\n",
    "\n",
    "    def addEdge(self, u, v):\n",
    "        self.graph[u].append(v)\n",
    "\n",
    "    def BFS(self, s):\n",
    "        visited = set()\n",
    "        queue = [s]\n",
    "        while queue:\n",
    "            vertex = queue.pop(0)\n",
    "            if vertex not in visited:\n",
    "                print(vertex, end=' ')\n",
    "                visited.add(vertex)\n",
    "                queue.extend([neighbour for neighbour in self.graph[vertex] if neighbour not in visited])\n",
    "\n",
    "\n",
    "g = Graph()\n",
    "edges = [(0, 1), (0, 2), (1, 2), (2, 0), (2, 3), (3, 3)]\n",
    "for edge in edges:\n",
    "    g.addEdge(*edge)\n",
    "\n",
    "print(\"BFS Traversal (starting from vertex 2):\")\n",
    "g.BFS(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DFS Traversal (starting from vertex 2):\n",
      "2 0 1 3 "
     ]
    }
   ],
   "source": [
    "from collections import defaultdict\n",
    "\n",
    "class Graph:\n",
    "    def __init__(self):\n",
    "        self.graph = defaultdict(list)\n",
    "\n",
    "    def addEdge(self, u, v):\n",
    "        self.graph[u].append(v)\n",
    "\n",
    "    def DFS(self, v, visited=None):\n",
    "        if visited is None:\n",
    "            visited = set()\n",
    "        visited.add(v)\n",
    "        print(v, end=' ')\n",
    "        for neighbour in self.graph[v]:\n",
    "            if neighbour not in visited:\n",
    "                self.DFS(neighbour, visited)\n",
    "\n",
    "\n",
    "g = Graph()\n",
    "edges = [(0, 1), (0, 2), (1, 2), (2, 0), (2, 3), (3, 3)]\n",
    "for edge in edges:\n",
    "    g.addEdge(*edge)\n",
    "\n",
    "print(\"DFS Traversal (starting from vertex 2):\")\n",
    "g.DFS(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Best First Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Path from 0 to 9:\n",
      "0 1 3 2 8 9 \n"
     ]
    }
   ],
   "source": [
    "from queue import PriorityQueue\n",
    "\n",
    "def best_first_search(actual_src, target, graph):\n",
    "    visited = set()\n",
    "    pq = PriorityQueue()\n",
    "    pq.put((0, actual_src))\n",
    "    visited.add(actual_src)\n",
    "    \n",
    "    while not pq.empty():\n",
    "        cost, u = pq.get()\n",
    "        print(u, end=\" \")\n",
    "        if u == target:\n",
    "            break\n",
    "        \n",
    "        for v, c in graph[u]:\n",
    "            if v not in visited:\n",
    "                visited.add(v)\n",
    "                pq.put((c, v))\n",
    "    print()\n",
    "\n",
    "def add_edge(graph, x, y, cost):\n",
    "    graph[x].append((y, cost))\n",
    "    graph[y].append((x, cost))\n",
    "\n",
    "graph = [[] for _ in range(14)]\n",
    "add_edge(graph, 0, 1, 3)\n",
    "add_edge(graph, 0, 2, 6)\n",
    "add_edge(graph, 0, 3, 5)\n",
    "add_edge(graph, 1, 4, 9)\n",
    "add_edge(graph, 1, 5, 8)\n",
    "add_edge(graph, 2, 6, 12)\n",
    "add_edge(graph, 2, 7, 14)\n",
    "add_edge(graph, 3, 8, 7)\n",
    "add_edge(graph, 8, 9, 5)\n",
    "add_edge(graph, 8, 10, 6)\n",
    "add_edge(graph, 9, 11, 1)\n",
    "add_edge(graph, 9, 12, 10)\n",
    "add_edge(graph, 9, 13, 2)\n",
    "\n",
    "print(\"Path from 0 to 9:\")\n",
    "best_first_search(0, 9, graph)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Monty Hall"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We are opening door number 1\n",
      "Do you want to switch to door number 3 ? (yes/no)\n",
      "Your prize is GOAT\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "def play_monty_hall(choice):\n",
    "    prizes = ['goat', 'car', 'goat']\n",
    "    random.shuffle(prizes)\n",
    "    \n",
    "    opening_door = random.choice([door+1 for door, prize in enumerate(prizes) if prize != 'car' and choice-1 != door])\n",
    "    print('We are opening door number', opening_door)\n",
    "    \n",
    "    switching_door = next(door for door in range(1, 4) if door != choice and door != opening_door)\n",
    "    \n",
    "    print('Do you want to switch to door number', switching_door, '? (yes/no)')\n",
    "    result = switching_door if input() == 'yes' else choice\n",
    "    \n",
    "    print('Your prize is', prizes[result-1].upper())\n",
    "\n",
    "choice = int(input('Which door do you want to choose? (1, 2, 3): '))\n",
    "play_monty_hall(choice)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Unification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'P': 'P', 'x': 'A', 'y': 'B'}\n",
      "{'Q': 'Q', 'y': 'C', 'z': 'D'}\n",
      "{'R': 'S', 'A': 'A', 'B': 'B'}\n",
      "{'x': 'y'}\n",
      "{'z': 'A'}\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "class Unification:\n",
    "\n",
    "    def unify(term1, term2):\n",
    "        if isinstance(term1, list) and isinstance(term2, list):\n",
    "            if len(term1) != len(term2):\n",
    "                return None\n",
    "            return {t1: t2 for t1, t2 in zip(term1, term2)}\n",
    "        elif term1 == term2:\n",
    "            return {}\n",
    "        elif isinstance(term1, str) and term1[0].islower():\n",
    "            return {term1: term2}\n",
    "        elif isinstance(term2, str) and term2[0].islower():\n",
    "            return {term2: term1}\n",
    "        return None\n",
    "\n",
    "\n",
    "# Test cases\n",
    "term1 = ['P', 'x', 'y']\n",
    "term2 = ['P', 'A', 'B']\n",
    "print(Unification.unify(term1, term2))  # Output: {'x': 'A', 'y': 'B'}\n",
    "\n",
    "term3 = ['Q', 'y', 'z']\n",
    "term4 = ['Q', 'C', 'D']\n",
    "print(Unification.unify(term3, term4))  # Output: {'y': 'C', 'z': 'D'}\n",
    "\n",
    "term5 = ['R', 'A', 'B']\n",
    "term6 = ['S', 'A', 'B']\n",
    "print(Unification.unify(term5, term6))  # Output: None\n",
    "\n",
    "term7 = 'x'\n",
    "term8 = 'y'\n",
    "print(Unification.unify(term7, term8))  # Output: {'x': 'y'}\n",
    "\n",
    "term9 = 'z'\n",
    "term10 = 'A'\n",
    "print(Unification.unify(term9, term10))  # Output: {'z': 'A'}\n",
    "\n",
    "term11 = 'P'\n",
    "term12 = ['P', 'x', 'y']\n",
    "print(Unification.unify(term11, term12))  # Output: None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Resolution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['~P', 'Q~R']\n"
     ]
    }
   ],
   "source": [
    "def resolve(clause1, clause2):\n",
    "    return [p1 + p2.replace(p1[1:], \"\") for p1 in clause1 for p2 in clause2 if p1[0] == \"~\"  + p2[1:] or p2[0] == \"~\" + p1[1:]]\n",
    "\n",
    "\n",
    "# Example usage\n",
    "clause1 = [\"~P\", \"Q\"]\n",
    "clause2 = [\"P\", \"~R\"]\n",
    "resolvent = resolve(clause1, clause2)\n",
    "print(resolvent)  # Output: ['Q', '~R']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sentiment Analysis (NLP)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sentiment 1: Positive\n",
      "Sentiment 2: Negative\n",
      "Sentiment 3: Positive\n"
     ]
    }
   ],
   "source": [
    "from textblob import TextBlob\n",
    "\n",
    "def analyze_sentiment(text):\n",
    "    analysis = TextBlob(text)\n",
    "    sentiment_score = analysis.sentiment.polarity\n",
    "    if sentiment_score > 0:\n",
    "        return \"Positive\"\n",
    "    elif sentiment_score < 0:\n",
    "        return \"Negative\"\n",
    "    else:\n",
    "        return \"Neutral\"\n",
    "\n",
    "# Example usage\n",
    "text1 = \"I love this product! It works great.\"\n",
    "text2 = \"This movie is terrible. I hated it.\"\n",
    "text3 = \"The weather is nice today.\"\n",
    "\n",
    "sentiment1 = analyze_sentiment(text1)\n",
    "sentiment2 = analyze_sentiment(text2)\n",
    "sentiment3 = analyze_sentiment(text3)\n",
    "\n",
    "print(\"Sentiment 1:\", sentiment1)\n",
    "print(\"Sentiment 2:\", sentiment2)\n",
    "print(\"Sentiment 3:\", sentiment3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# K-Means"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.datasets import make_blobs\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Step 1: Generate synthetic data\n",
    "X, _ = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=0)\n",
    "\n",
    "# Step 2: Standardize the data\n",
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X)\n",
    "\n",
    "# Step 3: Apply K-means clustering\n",
    "kmeans = KMeans(n_clusters=4)\n",
    "kmeans.fit(X_scaled)\n",
    "y_kmeans = kmeans.predict(X_scaled)\n",
    "centers = scaler.inverse_transform(kmeans.cluster_centers_)\n",
    "\n",
    "# Step 4: Visualize the clusters\n",
    "plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, s=50, cmap='viridis')\n",
    "plt.scatter(centers[:, 0], centers[:, 1], c='red', s=200, alpha=0.75, marker='X')\n",
    "plt.xlabel('Feature 1')\n",
    "plt.ylabel('Feature 2')\n",
    "plt.title('K-means Clustering')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Images:  60000\n",
      "Test Images:  10000\n",
      "Epoch 1/5\n",
      "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 7ms/step - accuracy: 0.8924 - loss: 0.3420 - val_accuracy: 0.9848 - val_loss: 0.0471\n",
      "Epoch 2/5\n",
      "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 6ms/step - accuracy: 0.9845 - loss: 0.0487 - val_accuracy: 0.9881 - val_loss: 0.0368\n",
      "Epoch 3/5\n",
      "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 6ms/step - accuracy: 0.9898 - loss: 0.0324 - val_accuracy: 0.9904 - val_loss: 0.0316\n",
      "Epoch 4/5\n",
      "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 5ms/step - accuracy: 0.9924 - loss: 0.0257 - val_accuracy: 0.9894 - val_loss: 0.0329\n",
      "Epoch 5/5\n",
      "\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 6ms/step - accuracy: 0.9946 - loss: 0.0167 - val_accuracy: 0.9884 - val_loss: 0.0340\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9859 - loss: 0.0396\n",
      "Test accuracy: 0.9883999824523926\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 58ms/step\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers, models\n",
    "\n",
    "\n",
    "# Define the CNN model\n",
    "def create_cnn_model(input_shape, num_classes):\n",
    "    model = models.Sequential([\n",
    "        layers.Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),\n",
    "        layers.MaxPooling2D((2, 2)),\n",
    "        layers.Conv2D(64, (3, 3), activation='relu'),\n",
    "        layers.MaxPooling2D((2, 2)),\n",
    "        layers.Conv2D(64, (3, 3), activation='relu'),\n",
    "        layers.Flatten(),\n",
    "        layers.Dense(64, activation='relu'),\n",
    "        layers.Dense(num_classes, activation='softmax')\n",
    "    ])\n",
    "    return model\n",
    "\n",
    "\n",
    "# Define the data preprocessing and loading\n",
    "def prepare_data():\n",
    "    (x_train, y_train), (x_test, y_test) = DATASET\n",
    "    x_train, x_test = x_train / 255.0, x_test / 255.0  # Normalize pixel values to [0, 1]\n",
    "    x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)\n",
    "    x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)\n",
    "    print(\"Training Images: \", len(x_train))\n",
    "    print(\"Test Images: \", len(x_test))\n",
    "    return x_train, y_train, x_test, y_test\n",
    "\n",
    "\n",
    "# Dataset\n",
    "DATASET = tf.keras.datasets.mnist.load_data()\n",
    "\n",
    "# Predict on any 10 random values (here, the first 25 images)\n",
    "NUM = 25\n",
    "SEEK = 0\n",
    "test_set = DATASET[0][0][SEEK : NUM + SEEK]\n",
    "\n",
    "# Create and compile the CNN model\n",
    "input_shape = (28, 28, 1)\n",
    "num_classes = 10\n",
    "model = create_cnn_model(input_shape, num_classes)\n",
    "model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Prepare and load the data\n",
    "x_train, y_train, x_test, y_test = prepare_data()\n",
    "\n",
    "# Train the model\n",
    "model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))\n",
    "\n",
    "# Evaluate the model\n",
    "test_loss, test_acc = model.evaluate(x_test, y_test)\n",
    "print(f'Test accuracy: {test_acc}')\n",
    "\n",
    "# Predict images\n",
    "results = model.predict(\n",
    "    test_set.reshape(\n",
    "        NUM, 28, 28, 1\n",
    "    )\n",
    ")\n",
    "digits = np.argmax(results, axis=-1)\n",
    "\n",
    "# Plot the predictions\n",
    "plt.figure(figsize=(10, 10))\n",
    "for i, img in enumerate(test_set):\n",
    "    plt.subplot(5, 5, (i % 25) + 1)\n",
    "    plt.xticks([])\n",
    "    plt.yticks([])\n",
    "    plt.grid(False)\n",
    "    plt.imshow(img * 255.0)\n",
    "    plt.xlabel(f\"Digit: {digits[i]}\")\n",
    "\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
